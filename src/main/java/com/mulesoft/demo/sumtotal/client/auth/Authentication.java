package com.mulesoft.demo.sumtotal.client.auth;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.5
 * 2013-05-20T11:38:58.539-07:00
 * Generated source version: 2.7.5
 * 
 */
@WebServiceClient(name = "Authentication", 
                  wsdlLocation = "http://mtn-sademo-128.sumtotalsystems.com/SumTotalWS/Services/authentication.asmx?wsdl",
                  targetNamespace = "http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/") 
public class Authentication extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/", "Authentication");
    public final static QName AuthenticationHttpGet = new QName("http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/", "AuthenticationHttpGet");
    public final static QName AuthenticationSoap12 = new QName("http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/", "AuthenticationSoap12");
    public final static QName AuthenticationSoap = new QName("http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/", "AuthenticationSoap");
    public final static QName AuthenticationHttpPost = new QName("http://www.sumtotalsystems.com/sumtotal7/sumtotalws/Authentication/", "AuthenticationHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://mtn-sademo-128.sumtotalsystems.com/SumTotalWS/Services/authentication.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Authentication.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://mtn-sademo-128.sumtotalsystems.com/SumTotalWS/Services/authentication.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Authentication(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Authentication(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Authentication() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns AuthenticationHttpGet
     */
    @WebEndpoint(name = "AuthenticationHttpGet")
    public AuthenticationHttpGet getAuthenticationHttpGet() {
        return super.getPort(AuthenticationHttpGet, AuthenticationHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthenticationHttpGet
     */
    @WebEndpoint(name = "AuthenticationHttpGet")
    public AuthenticationHttpGet getAuthenticationHttpGet(WebServiceFeature... features) {
        return super.getPort(AuthenticationHttpGet, AuthenticationHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap12")
    public AuthenticationSoap getAuthenticationSoap12() {
        return super.getPort(AuthenticationSoap12, AuthenticationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap12")
    public AuthenticationSoap getAuthenticationSoap12(WebServiceFeature... features) {
        return super.getPort(AuthenticationSoap12, AuthenticationSoap.class, features);
    }
    /**
     *
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap")
    public AuthenticationSoap getAuthenticationSoap() {
        return super.getPort(AuthenticationSoap, AuthenticationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap")
    public AuthenticationSoap getAuthenticationSoap(WebServiceFeature... features) {
        return super.getPort(AuthenticationSoap, AuthenticationSoap.class, features);
    }
    /**
     *
     * @return
     *     returns AuthenticationHttpPost
     */
    @WebEndpoint(name = "AuthenticationHttpPost")
    public AuthenticationHttpPost getAuthenticationHttpPost() {
        return super.getPort(AuthenticationHttpPost, AuthenticationHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthenticationHttpPost
     */
    @WebEndpoint(name = "AuthenticationHttpPost")
    public AuthenticationHttpPost getAuthenticationHttpPost(WebServiceFeature... features) {
        return super.getPort(AuthenticationHttpPost, AuthenticationHttpPost.class, features);
    }

}
